// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "mysql"
url = env("DATABASE_URL")
}

model Admin {
id Int @id @default(autoincrement())
login String @unique
password String
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
patients Patient[]
}

model Patient {
id Int @id @default(autoincrement())
name String
age Int
sex String
address String
contact String
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
adminId Int
admin Admin @relation(fields: [adminId], references: [id])
appointments Appointment[]
}

model Appointment {
id Int @id @default(autoincrement())
date DateTime
time String
room String
observations String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
patientId Int
patient Patient @relation(fields: [patientId], references: [id])
doctorId Int?
doctor Doctor? @relation(fields: [doctorId], references: [id])
}

model Doctor {
id Int @id @default(autoincrement())
name String
field String
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
appointments Appointment[]
}






// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id          Int      @id @default(autoincrement())
//   login       String   @unique
//   password    String
//   patients    Patient[]
// }

// model Patient {
//   id          Int      @id @default(autoincrement())
//   name        String
//   age         Int
//   sex         String
//   address     String
//   contact     String
//   appointments Appointment[]

//   userId      Int?
//   user        User?    @relation(fields: [userId], references: [id])
// }

// model Appointment {
//   id          Int      @id @default(autoincrement())
//   date        DateTime
//   time        DateTime
//   room        String
//   observations String?

//   patientId   Int?
//   patient     Patient? @relation(fields: [patientId], references: [id])

//   doctorId    Int?
//   doctor      Doctor? @relation(fields: [doctorId], references: [id])
// }

// model Doctor {
//   id          Int      @id @default(autoincrement())
//   name        String
//   field       String
//   appointments Appointment[]
// }